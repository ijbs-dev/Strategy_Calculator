// Interface Strategy
interface OperacaoStrategy {
  execute(num1: number, num2: number): number;
}

// Implementação concreta para Soma
export class Soma implements OperacaoStrategy {
  execute(num1: number, num2: number): number {
    return num1 + num2;
  }
}

// Implementação concreta para Subtração
export class Subtracao implements OperacaoStrategy {
  execute(num1: number, num2: number): number {
    return num1 - num2;
  }
}

// Implementação concreta para Multiplicação
export class Multiplicacao implements OperacaoStrategy {
  execute(num1: number, num2: number): number {
    return num1 * num2;
  }
}

// Contexto que utiliza a Strategy
export class Calculadora {
  private estrategia: OperacaoStrategy;

  setEstrategia(estrategia: OperacaoStrategy): void {
    this.estrategia = estrategia;
  }

  executarOperacao(num1: number, num2: number): number {
    if (!this.estrategia) {
      throw new Error("Estratégia não definida");
    }

    return this.estrategia.execute(num1, num2);
  }
}

// Exemplo de uso
const calculadora = new Calculadora();

// Recebe valores do usuário (simulando input)
const valor1 = 10;
const valor2 = 5;
const operacao = "soma"; // Substitua por "subtracao" ou "multiplicacao" para testar outras operações

// Define a estratégia com base na operação informada
switch (operacao) {
  case "soma":
    calculadora.setEstrategia(new Soma());
    break;
  case "subtracao":
    calculadora.setEstrategia(new Subtracao());
    break;
  case "multiplicacao":
    calculadora.setEstrategia(new Multiplicacao());
    break;
  default:
    throw new Error("Operação não suportada");
}

// Executa a operação e imprime o resultado
const resultado = calculadora.executarOperacao(valor1, valor2);
console.log(`Resultado da ${operacao}: ${resultado}`);
